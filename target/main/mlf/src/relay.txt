def @main(%serving_default_input:0: Tensor[(1, 1960), int8] /* ty=Tensor[(1, 1960), int8] */, %v_param_1: Tensor[(5, 4, 1, 4), int8] /* ty=Tensor[(5, 4, 1, 4), int8] */, %v_param_2: Tensor[(4), int32] /* ty=Tensor[(4), int32] */, %v_param_3: Tensor[(4, 2000), int8] /* ty=Tensor[(4, 2000), int8] */, %v_param_4: Tensor[(4), int32] /* ty=Tensor[(4), int32] */, output_tensor_names=["StatefulPartitionedCall_0"]) -> Tensor[(1, 4), int8] {
  %0 = reshape(%serving_default_input:0, newshape=[-1, 49, 40, 1]) /* ty=Tensor[(1, 49, 40, 1), int8] */;
  %1 = layout_transform(%0, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 1, 49, 40), int8] */;
  %2 = layout_transform(%v_param_1, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(4, 1, 5, 4), int8] */;
  %3 = expand_dims(%v_param_2, axis=0, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 4), int32] */;
  %4 = qnn.conv2d(%1, %2, -128 /* ty=int32 */, 0 /* ty=int32 */, 0.101562f /* ty=float32 */, meta[relay.Constant][0] /* ty=Tensor[(4), float32] */, strides=[2, 2], padding=[2, 1, 2, 1], channels=4, kernel_size=[5, 4], out_dtype="int32") /* ty=Tensor[(1, 4, 25, 20), int32] */;
  %5 = layout_transform(%3, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 4, 1, 1), int32] */;
  %6 = add(%4, %5) /* ty=Tensor[(1, 4, 25, 20), int32] */;
  %7 = qnn.requantize(%6, meta[relay.Constant][1] /* ty=Tensor[(4), float32] */, 0 /* ty=int32 */, 0.043894f /* ty=float32 */, -128 /* ty=int32 */, axis=1, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 4, 25, 20), int8] */;
  %8 = clip(%7, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 4, 25, 20), int8] */;
  %9 = layout_transform(%8, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 25, 20, 4), int8] */;
  %10 = reshape(%9, newshape=[-1, 2000]) /* ty=Tensor[(1, 2000), int8] */;
  %11 = reshape(%10, newshape=[-1, 2000]) /* ty=Tensor[(1, 2000), int8] */;
  %12 = qnn.dense(%11, %v_param_3, -128 /* ty=int32 */, 0 /* ty=int32 */, 0.043894f /* ty=float32 */, 0.0125261f /* ty=float32 */, units=4, out_dtype="int32") /* ty=Tensor[(1, 4), int32] */;
  %13 = add(%12, %v_param_4) /* ty=Tensor[(1, 4), int32] */;
  %14 = qnn.requantize(%13, 0.000549823f /* ty=float32 */, 0 /* ty=int32 */, 0.181007f /* ty=float32 */, 68 /* ty=int32 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 4), int8] */;
  %15 = qnn.dequantize(%14, 0.181007f /* ty=float32 */, 68 /* ty=int32 */) /* ty=Tensor[(1, 4), float32] */;
  %16 = nn.softmax(%15) /* ty=Tensor[(1, 4), float32] */;
  qnn.quantize(%16, 0.00390625f /* ty=float32 */, -128 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(1, 4), int8] */
}

